// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::drivetrainLeftRear = NULL;
SpeedController* RobotMap::drivetrainLeftFront = NULL;
SpeedController* RobotMap::drivetrainRightRear = NULL;
SpeedController* RobotMap::drivetrainRightFront = NULL;
RobotDrive* RobotMap::drivetrainDrivetrain = NULL;
Encoder* RobotMap::drivetrainLeftFrontEncoder = NULL;
Encoder* RobotMap::drivetrainLeftRearEncoder = NULL;
Encoder* RobotMap::drivetrainRightFrontEncoder = NULL;
Encoder* RobotMap::drivetrainRightRearEncoder = NULL;
SpeedController* RobotMap::elevatorPIDLifter = NULL;
Encoder* RobotMap::elevatorPIDLiftEncoder = NULL;
Relay* RobotMap::elevatorPIDLiftBrake = NULL;
DigitalInput* RobotMap::elevatorPIDBotSwitch = NULL;
DigitalInput* RobotMap::elevatorPIDTopSwitch = NULL;
SpeedController* RobotMap::claw0PIDClaw0Motor = NULL;
Relay* RobotMap::claw0PIDClaw0Brake = NULL;
AnalogPotentiometer* RobotMap::claw0PIDClaw0Pot = NULL;
Encoder* RobotMap::claw0PIDClaw0Encoder = NULL;
DigitalInput* RobotMap::claw0PIDClosedSwitch = NULL;
DigitalInput* RobotMap::claw0PIDOpenedSwitch = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	drivetrainLeftRear = new Victor(1);
	lw->AddActuator("Drivetrain", "Left Rear", (Victor*) drivetrainLeftRear);
	
	drivetrainLeftFront = new Victor(0);
	lw->AddActuator("Drivetrain", "Left Front", (Victor*) drivetrainLeftFront);
	
	drivetrainRightRear = new Victor(3);
	lw->AddActuator("Drivetrain", "Right Rear", (Victor*) drivetrainRightRear);
	
	drivetrainRightFront = new Victor(2);
	lw->AddActuator("Drivetrain", "Right Front", (Victor*) drivetrainRightFront);
	
	drivetrainDrivetrain = new RobotDrive(drivetrainLeftFront, drivetrainLeftRear,
              drivetrainRightFront, drivetrainRightRear);
	
	drivetrainDrivetrain->SetSafetyEnabled(true);
        drivetrainDrivetrain->SetExpiration(0.1);
        drivetrainDrivetrain->SetSensitivity(0.5);
        drivetrainDrivetrain->SetMaxOutput(1.0);

        drivetrainDrivetrain->SetInvertedMotor(RobotDrive::kFrontRightMotor, true);
        drivetrainDrivetrain->SetInvertedMotor(RobotDrive::kRearRightMotor, true);
	drivetrainLeftFrontEncoder = new Encoder(0, 1, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "Left Front Encoder", drivetrainLeftFrontEncoder);
	drivetrainLeftFrontEncoder->SetDistancePerPulse(1.0);
        drivetrainLeftFrontEncoder->SetPIDSourceParameter(Encoder::kRate);
	drivetrainLeftRearEncoder = new Encoder(2, 3, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "Left Rear Encoder", drivetrainLeftRearEncoder);
	drivetrainLeftRearEncoder->SetDistancePerPulse(1.0);
        drivetrainLeftRearEncoder->SetPIDSourceParameter(Encoder::kRate);
	drivetrainRightFrontEncoder = new Encoder(4, 5, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "Right Front Encoder", drivetrainRightFrontEncoder);
	drivetrainRightFrontEncoder->SetDistancePerPulse(1.0);
        drivetrainRightFrontEncoder->SetPIDSourceParameter(Encoder::kRate);
	drivetrainRightRearEncoder = new Encoder(6, 7, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "Right Rear Encoder", drivetrainRightRearEncoder);
	drivetrainRightRearEncoder->SetDistancePerPulse(1.0);
        drivetrainRightRearEncoder->SetPIDSourceParameter(Encoder::kRate);
	elevatorPIDLifter = new Jaguar(4);
	lw->AddActuator("ElevatorPID", "Lifter", (Jaguar*) elevatorPIDLifter);
	
	elevatorPIDLiftEncoder = new Encoder(8, 9, false, Encoder::k4X);
	lw->AddSensor("ElevatorPID", "Lift Encoder", elevatorPIDLiftEncoder);
	elevatorPIDLiftEncoder->SetDistancePerPulse(0.004);
        elevatorPIDLiftEncoder->SetPIDSourceParameter(Encoder::kDistance);
	elevatorPIDLiftBrake = new Relay(0);
	lw->AddActuator("ElevatorPID", "Lift Brake", elevatorPIDLiftBrake);
	
	elevatorPIDBotSwitch = new DigitalInput(16);
	lw->AddSensor("ElevatorPID", "Bot Switch", elevatorPIDBotSwitch);
	
	elevatorPIDTopSwitch = new DigitalInput(17);
	lw->AddSensor("ElevatorPID", "Top Switch", elevatorPIDTopSwitch);
	
	claw0PIDClaw0Motor = new Talon(5);
	lw->AddActuator("Claw0 PID", "Claw 0 Motor", (Talon*) claw0PIDClaw0Motor);
	
	claw0PIDClaw0Brake = new Relay(1);
	lw->AddActuator("Claw0 PID", "Claw 0 Brake", claw0PIDClaw0Brake);
	
	claw0PIDClaw0Pot = new AnalogPotentiometer(0, 1.0, 0.0);
	lw->AddSensor("Claw0 PID", "Claw 0 Pot", claw0PIDClaw0Pot);
	
	claw0PIDClaw0Encoder = new Encoder(10, 11, false, Encoder::k4X);
	lw->AddSensor("Claw0 PID", "Claw 0 Encoder", claw0PIDClaw0Encoder);
	claw0PIDClaw0Encoder->SetDistancePerPulse(1.0);
        claw0PIDClaw0Encoder->SetPIDSourceParameter(Encoder::kRate);
	claw0PIDClosedSwitch = new DigitalInput(18);
	lw->AddSensor("Claw0 PID", "Closed Switch", claw0PIDClosedSwitch);
	
	claw0PIDOpenedSwitch = new DigitalInput(19);
	lw->AddSensor("Claw0 PID", "Opened Switch", claw0PIDOpenedSwitch);
	


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
